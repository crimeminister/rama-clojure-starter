{:mvn/repos {"releases" {:url "https://nexus.redplanetlabs.com/repository/maven-public-releases"}}

 :paths ["src"]

 :deps {com.rpl/rama-helpers {:mvn/version "0.9.3"}}

 :aliases {:dev {:extra-paths ["test"]
                 :resource-paths ["test/resources/"]
                 ;; Necessary for development, but provided when deployed.
                 :extra-deps {com.rpl/rama {:mvn/version "0.12.1"}}}

           ;; Aliases for running the various examples. Each invocation
           ;; should include the :dev alias:
           ;;
           ;; $ clj -M:dev:example/foo

           ;; Standalone
           :examples/auction
           {:main-opts ["-m" "rama-clojure-starter.examples.auction"]}
           :examples/word-count
           {:main-opts ["-m" "rama-clojure-starter.examples.word-count"]}

           ;; Depots
           :examples/depots.append
           {:main-opts ["-m" "rama-clojure-starter.examples.depots.append"]}
           :examples/depots.basic
           {:main-opts ["-m" "rama-clojure-starter.examples.depots.basic"]}
           :examples/depots.custom
           {:main-opts ["-m" "rama-clojure-starter.examples.depots.custom"]}
           :examples/depots.bad
           {:main-opts ["-m" "rama-clojure-starter.examples.depots.profile-bad"]}
           :examples/depots.good
           {:main-opts ["-m" "rama-clojure-starter.examples.depots.profile-good"]}
           :examples/depots.tick
           {:main-opts ["-m" "rama-clojure-starter.examples.depots.tick"]}

           ;; Paths
           :examples/paths.filtered-list
           {:main-opts ["-m" "rama-clojure-starter.examples.paths.filtered-list-module"]}
           :examples/paths.list-virtual-values
           {:main-opts ["-m" "rama-clojure-starter.examples.paths.list-virtual-values-module"]}
           :examples/paths.map-key
           {:main-opts ["-m" "rama-clojure-starter.examples.paths.map-key-module"]}
           :examples/paths.multi-arity-term
           {:main-opts ["-m" "rama-clojure-starter.examples.paths.multi-arity-term-module"]}
           :examples/paths.set-virtual-values
           {:main-opts ["-m" "rama-clojure-starter.examples.paths.set-virtual-values-module"]}
           :examples/paths.sub-list
           {:main-opts ["-m" "rama-clojure-starter.examples.paths.sub-list-module"]}
           :examples/paths.subselect
           {:main-opts ["-m" "rama-clojure-starter.examples.paths.subselect-module"]}
           :examples/paths.term-void
           {:main-opts ["-m" "rama-clojure-starter.examples.paths.term-void-module"]}

           ;; PStates
           :examples/pstates.basic-reactive
           {:main-opts ["-m" "rama-clojure-starter.examples.pstates.basic-reactive"]}
           :examples/pstates.callback-reactive
           {:main-opts ["-m" "rama-clojure-starter.examples.pstates.callback-reactive"]}
           :examples/pstates.client-select
           {:main-opts ["-m" "rama-clojure-starter.examples.pstates.client-select"]}
           :examples/pstates.diff
           {:main-opts ["-m" "rama-clojure-starter.examples.pstates.diff"]}
           :examples/pstates.multi
           {:main-opts ["-m" "rama-clojure-starter.examples.pstates.multi"]}
           :examples/pstates.partition
           {:main-opts ["-m" "rama-clojure-starter.examples.pstates.partition"]}

           ;; Queries
           :examples/query.simple
           {:main-opts ["-m" "rama-clojure-starter.examples.query.simple"]}
           :examples/query.fibonacci
           {:main-opts ["-m" "rama-clojure-starter.examples.query.fibonacci"]}
           :examples/query.reach
           {:main-opts ["-m" "rama-clojure-starter.examples.query.reach"]}
           :examples/query.state
           {:main-opts ["-m" "rama-clojure-starter.examples.query.state"]}
           :examples/query.colocated
           {:main-opts ["-m" "rama-clojure-starter.examples.query.colocated"]}
           }}
